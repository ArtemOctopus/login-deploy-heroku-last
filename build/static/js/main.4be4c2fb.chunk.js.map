{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","showMessage","messageErr","className","login","pass","email","user","password","axios","post","headers","then","res","setState","data","message","console","log","catch","response","register","passReg","emailReg","validationEmail","emailValidReg","test","validationPass","passValidReg","length","validationEmailLogin","emailValid","validationPassLogin","passValid","state","this","placeholder","onChange","el","target","value","disabled","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.4be4c2fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios'\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      emailValid: false,\n      passValid: false,\n      pass: '',\n      email: '',\n      emailValidReg: false,\n      passValidReg: false,\n      passReg: '',\n      emailReg: '',\n      messageErr: ''\n    }\n  }\n\n  showMessage = (messageErr) => {\n    return (\n      <div className=\"message\">{messageErr}</div>\n    )\n  }\n\n  login = (pass, email) => {\n    const user = {\n      email: email,\n      password: pass\n    }\n    axios.post('https://testdeployapp1.herokuapp.com/api/auth/login', user, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      }\n    })\n      .then(res => {\n        this.setState({ messageErr: res.data.message})\n        console.log('then',res.data.message)\n      })\n      .catch(res => {\n        this.setState({ messageErr: res.response.data.message })\n        console.log('catch',res.response.data.message)\n      })\n  }\n\n  register = (passReg, emailReg) => {\n    const user = {\n      email: emailReg,\n      password: passReg\n    }\n    axios.post('https://testdeployapp1.herokuapp.com/api/auth/register', user, {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json',\n      }\n    })\n      .then(res => {\n        this.setState({ messageErr: res.data.message })\n      })\n      .catch(res => {\n        this.setState({ messageErr: res.response.data.message })\n      })\n  }\n\n  validationEmail = (emailReg) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    this.setState({ emailValidReg: !re.test(emailReg), emailReg })\n  }\n\n  validationPass = (passReg) => {\n    this.setState({ passValidReg: passReg.length >= 6 ? false : true, passReg })\n  }\n\n  validationEmailLogin = (email) => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    this.setState({ emailValid: !re.test(email), email })\n  }\n\n  validationPassLogin = (pass) => {\n    this.setState({ passValid: pass.length >= 6 ? false : true, pass })\n  }\n\n  render() {\n    const { emailValid, passValid, emailValidReg, passValidReg, email, pass, emailReg, passReg, message, messageErr } = this.state\n    console.log('email', email, 'emailReg', emailReg, emailValid, passValid, emailValidReg, passValidReg, '!!message', !!message, 'message', messageErr)\n    return (\n      <div className=\"App\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <div className=\"message\">{messageErr}</div>\n        <div className=\"registration\">\n          <span className=\"label\">Registartion</span>\n          <input className=\"input\" placeholder=\"email\" onChange={(el) => this.validationEmail(el.target.value)} />\n          <input className=\"input\" placeholder=\"password\" onChange={(el) => this.validationPass(el.target.value)} />\n          <button className=\"button\" disabled={(!passValidReg && !emailValidReg && !!passReg && !!emailReg) ? false : true} onClick={() => this.register(passReg, emailReg)}>Зарегистрироваться</button>\n        </div>\n        <div className=\"registration\">\n          <span className=\"label\">Login</span>\n          <input className=\"input\" placeholder=\"email\" onChange={(el) => this.validationEmailLogin(el.target.value)} />\n          <input className=\"input\" placeholder=\"password\" onChange={(el) => this.validationPassLogin(el.target.value)} />\n          <button className=\"button\" disabled={(!passValid && !emailValid && !!pass && !!email) ? false : true} onClick={() => this.login(pass, email)}> Войти</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}